plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.sonarqube" version "3.3"
    id "jacoco"
}
repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
}


version = project.hasProperty("release.version") ? project.properties.get("release.version") : 'SNAPSHOT'

ext {
    springBootVersion = "2.6.3"
    actuatorVersion = "2.6.3"
    micrometerVersion = "1.8.2"
    springAopVersion = "5.3.16"
    feignVersion = "10.10.1"
    feignMicrometerVersion = "11.9"
    sentryVersion = "6.2.1"
}
dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.1.0"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.0"
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.2.10.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.1'
    implementation "org.springframework.boot:spring-boot-configuration-processor:2.6.2"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter:2.6.2'
    runtimeOnly "org.postgresql:postgresql"

    implementation "org.springframework.boot:spring-boot-starter-actuator:$actuatorVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"
    implementation "org.springframework:spring-aop:$springAopVersion"

    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.11'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.3'
    implementation 'org.hibernate:hibernate-validator:7.0.1.Final'
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.2'
    implementation 'commons-codec:commons-codec:1.15'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation "com.rabbitmq:amqp-client:5.14.0"
    implementation "org.springframework.amqp:spring-rabbit:2.4.0"
    implementation 'org.keycloak:keycloak-spring-security-adapter:16.0.0'
    implementation 'org.keycloak:keycloak-spring-boot-starter:16.1.0'
    implementation 'io.jsonwebtoken:jjwt:0.2'
    implementation "io.github.openfeign:feign-core:$feignVersion"
    implementation "io.github.openfeign:feign-okhttp:$feignMicrometerVersion"
    implementation "io.github.openfeign:feign-micrometer:$feignMicrometerVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation 'org.liquibase:liquibase-core:4.8.0'

    implementation 'net.logstash.logback:logstash-logback-encoder:7.1.1'
    runtimeOnly("io.sentry:sentry-logback:$sentryVersion")
    runtimeOnly("io.sentry:sentry-spring-boot-starter:$sentryVersion")

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test:5.6.2'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:3.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}
test {
    useJUnitPlatform()
}
compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=ERROR'
    ]
}

sonarqube {
    properties {
        property "sonar.projectKey", "bnpl-mobile-api"
    }
}


jacocoTestReport {
    reports {
        xml.enabled true
    }
}
bootRun {
    systemProperty("spring.profiles.active", "develop-cloud")
}